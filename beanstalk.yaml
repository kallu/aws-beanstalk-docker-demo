---
AWSTemplateFormatVersion: '2010-09-09'
Description:  Elastic Beanstalk Docker application

# Modified from https://github.com/aws-samples/startup-kit-templates/blob/master/templates/elastic-beanstalk.cfn.yml

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Application"
        Parameters:
          - ApplicationName
          - EnvironmentName
          - AppS3Bucket
          - AppS3Key
      -
        Label:
          default: "EC2 Instances"
        Parameters:
          - InstanceType
          - AutoScalingMinInstanceCount
          - AutoScalingMaxInstanceCount
      -
        Label:
          default: "Loadbalancer"
        Parameters:
          - LBPort
          - SSLCertificateArn
      -
        Label:
          default: "Network Config"
        Parameters:
          - VpcId
          - PublicSubnets
          - PrivateSubnets

Parameters:

  ApplicationName:
    Description: Name of your application
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"

  EnvironmentName:
    Description: Environment name, either dev, test or prod.
    Default: dev
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedValues:
      - dev
      - test
      - prod
    ConstraintDescription: Specify either dev, test or prod

  AppS3Bucket:
    Description: S3 Bucket containing your application package.
    Type: String
    MinLength: 1
    MaxLength: 255

  AppS3Key:
    Description: S3 Bucket key for your application package
    Type: String
    MinLength: 1
    MaxLength: 255

  InstanceType:
    Description: EC2 instance type
    Type: String
    MinLength: 1
    MaxLength: 255
    Default: t2.small

  SSLCertificateArn:
    Description: The SSL/TLS certificate ARN
    Type: String
    MinLength: 0
    MaxLength: 2048
    Default: "NA"

  AutoScalingMinInstanceCount:
    Description: Minimum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 2
    ConstraintDescription: Specify a number between 1 - 20

  AutoScalingMaxInstanceCount:
    Description: Maximum number of EC2 instances for Auto Scaling
    Type: Number
    MinValue: 1
    MaxValue: 20
    Default: 4
    ConstraintDescription: Specify a number between 1 - 20

  LBPort:
    Description: Loadbalancer Protocol
    Type: Number
    Default: 80

  VpcId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/cloudformation/web-app-vpc/vpcid'

  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: '/cloudformation/web-app-vpc/privsubnets'

  PublicSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: '/cloudformation/web-app-vpc/pubsubnets'

Conditions:
  TlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "NA" ] ]

Resources:

  ElasticBeanstalkServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": [ "elasticbeanstalk.amazonaws.com" ]},
            "Action": [ "sts:AssumeRole" ]
          }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkEnhancedHealth
        - arn:aws:iam::aws:policy/service-role/AWSElasticBeanstalkService

  LBsecgroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Application sec.group for ${AWS::StackName}'
      VpcId: !Ref VpcId

  LBsecgroupIngressExt:
    Type:  AWS::EC2::SecurityGroupIngress
    DependsOn: LBsecgroup
    Properties: 
      CidrIp: 0.0.0.0/0
      Description: External access from Internet
      FromPort: !Ref LBPort
      ToPort: !Ref LBPort
      IpProtocol: tcp
      GroupId: !Ref LBsecgroup

  Application:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref ApplicationName

  ApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName: !Ref Application
      SourceBundle:
        S3Bucket: !Ref AppS3Bucket
        S3Key: !Ref AppS3Key

  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      EnvironmentName: !Sub "${ApplicationName}-${EnvironmentName}"
      ApplicationName: !Ref Application
      TemplateName: !Ref ConfigurationTemplate
      VersionLabel: !Ref ApplicationVersion
    DependsOn:
      - ConfigurationTemplate
      - ApplicationVersion

  # The configuration template contains environment parameters such as those
  # that relate to the autoscaling group (e.g. size, triggers), placement of
  # resources in the VPC, load balancer setup, and environment variables
  #
  # See
  # https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/command-options-general.html
  # 
  ConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName: !Ref Application
      SolutionStackName: "64bit Amazon Linux 2018.03 v2.11.4 running Multi-container Docker 18.06.1-ce (Generic)"
      OptionSettings:

      # Enable weekly instance replacement, automatic patching and minor version updates on Tue 09:00am
      - Namespace: aws:elasticbeanstalk:managedactions
        OptionName: ManagedActionsEnabled
        Value: true

      - Namespace: aws:elasticbeanstalk:managedactions
        OptionName: PreferredStartTime
        Value: Tue:09:00

      - Namespace: aws:elasticbeanstalk:managedactions:platformupdate
        OptionName: UpdateLevel
        Value: minor

      - Namespace: aws:elasticbeanstalk:managedactions:platformupdate
        OptionName: InstanceRefreshEnabled
        Value: true

      - Namespace: aws:elasticbeanstalk:healthreporting:system
        OptionName: SystemType
        Value: enhanced

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        Value: application

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: ServiceRole
        Value: !Ref ElasticBeanstalkServiceRole

      # AUTOSCALING OPTIONS
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: !Ref AutoScalingMinInstanceCount

      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: !Ref AutoScalingMaxInstanceCount

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: InstanceType
        Value: !Ref InstanceType

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref AppInstanceProfile

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateEnabled
        Value: false

      - Namespace: aws:autoscaling:updatepolicy:rollingupdate
        OptionName: RollingUpdateType
        Value: Health

      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: CPUUtilization

      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
        Value: Percent

      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: 80

      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: 40

      # VPC OPTIONS (PLACEMENT OF RESOURCES IN SUBNETS)
      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !Ref VpcId

      - Namespace: aws:ec2:vpc
        OptionName: AssociatePublicIpAddress
        Value: false

      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value: !Join
          - ','
          - !Ref PrivateSubnets
    
      - Namespace: aws:ec2:vpc
        OptionName: ELBSubnets
        Value: !Join
          - ','
          - !Ref PublicSubnets

      - Namespace: aws:elbv2:loadbalancer
        OptionName: SecurityGroups
        Value: !Ref LBsecgroup

      - Namespace: aws:elbv2:loadbalancer
        OptionName: ManagedSecurityGroup
        Value: !Ref LBsecgroup

      - Namespace: aws:elbv2:listenerrule:default
        OptionName: PathPatterns
        Value: "/*"

      - Namespace: !Sub "aws:elbv2:listener:${LBPort}"
        OptionName: ListenerEnabled
        Value: true

      - Namespace: !Sub "aws:elbv2:listener:${LBPort}"
        OptionName: Protocol
        Value: !If [ TlsEnabled, HTTPS, HTTP ]

      - Namespace: !Sub "aws:elbv2:listener:${LBPort}"
        OptionName: Rules
        Value: default

      - Namespace: !Sub "aws:elbv2:listener:${LBPort}"
        OptionName: SSLCertificateArns
        Value:
          !If
            - TlsEnabled
            - !Ref SSLCertificateArn
            - !Ref "AWS::NoValue"

      # CLOUDWATCH LOGS
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: true

      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: DeleteOnTerminate
        Value: true

      # ENVIRONMENT VARIABLES - COMMON TO ALL STACKS
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: AWS_REGION
        Value: !Ref AWS::Region

  # IAM resources
  AppRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
          - arn:aws:iam::aws:policy/AWSElasticBeanstalkWebTier
          - arn:aws:iam::aws:policy/AWSElasticBeanstalkWorkerTier
          - arn:aws:iam::aws:policy/AWSElasticBeanstalkMulticontainerDocker
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        -
          PolicyName: "S3access"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource:
                  - !Sub "arn:aws:s3:::${AppS3Bucket}"
                  - !Sub "arn:aws:s3:::${AppS3Bucket}/*"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref AppRole

Outputs:

  EnvironmentURL:
    Description: Environment URL
    Value: !GetAtt Environment.EndpointURL
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentURL"

  EnvironmentName:
    Description: Environment Name
    Value: !Sub "${ApplicationName}-${EnvironmentName}"
    Export:
      Name: !Sub "${AWS::StackName}-EnvironmentName"
